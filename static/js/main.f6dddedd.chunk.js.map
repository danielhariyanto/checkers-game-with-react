{"version":3,"sources":["utils.js","components/Logic.js","components/Board.js","components/Opponent.js","App.js","index.js"],"names":["isOdd","n","Math","abs","getColAsInt","columns","coordinate","charAt","getColAsAlph","columnInt","key","hasOwnProperty","getRowAsInt","parseInt","returnPlayerName","playerBool","Logic","this","coordinates","col","utils","row","columnLeft","columnRight","rowUpper","rowLower","corners","leftUpper","rightUpper","leftLower","rightLower","boardState","isKing","hasJumped","movesOut","moves","jumps","killJumps","getCorners","player","advanceRow","cornerCoordinates","indexOf","push","neighborPiece","opponentCorners","potentialJump","concat","killJumpsOut","length","state","currentState","Object","assign","history","stepNumber","movingPiece","activePiece","jumpArray","jumpKills","shouldKing","object","value","newMoves","setCurrentPlayer","setActivePiece","keys","find","getMoves","currentPlayer","stateOut","winner","evaluateWinner","player1Pieces","player1Moves","player2Pieces","player2Moves","moveCount","Square","props","squareClasses","onClick","className","Board","boardRender","columnsRender","colorClass","moveClass","join","renderSquare","reverse","React","Component","Opponent","computerMoves","currentSquare","pieceMoves","getComputerMoves","moveKeys","superMoves","m","piece","movesData","jumpMoves","jumpCoordinates","highestScore","bestMove","a","moveTo","score","stateLeaf","newJumpMoves","finalMove","highestAllMoves","pieces","pieceMove","moveScore","chooseMove","floor","random","out","randomPiece","randomMoveTo","browserHistory","createBrowserHistory","Game","setColumns","createBoard","board","initPlayers","self","forEach","i","createPiece","location","slice","getCurrentState","clickedSquare","postMoveState","movePiece","updateStatePostMove","computerTurn","setState","setTimeout","computerMove","getSmartMove","backStep","unsetHistory","gameStatus","stateHistory","undoClass","basename","handleClick","undo","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.f6dddedd.chunk.js","sourcesContent":["export function isOdd(n) {\n    return Math.abs(n % 2) === 1;\n}\n\nexport function getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n}\n\nexport function getColAsInt(columns, coordinate) {\n    return columns[coordinate.charAt(0)];\n}\n\nexport function getColAsAlph(columns, columnInt) {\n\n    for (let key in columns) {\n        if (!columns.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (columnInt === columns[key]) {\n            return key;\n        }\n    }\n\n    return false;\n}\n\nexport function getRowAsInt(coordinate) {\n    return parseInt(coordinate.charAt(1), 10);\n}\n\nexport function returnPlayerName(playerBool) {\n    return playerBool === true ? 'player1' : 'player2';\n}","import * as utils from '../utils.js';\n\nexport class Logic {\n\n    constructor(columns) {\n        this.columns = columns;\n    }\n\n    getCorners(coordinates) {\n\n        const col = utils.getColAsInt(this.columns, coordinates);\n        const row = utils.getRowAsInt(coordinates);\n\n        const columnLeft  = col -1 >= 0 ? utils.getColAsAlph(this.columns, col - 1) : false;\n        const columnRight = col +1 <= 7 ? utils.getColAsAlph(this.columns, col + 1) : false;\n\n        const rowUpper = row +1 < 9 ? row +1 : false;\n        const rowLower = row -1 > 0 ? row -1 : false;\n\n        let corners = {};\n\n        corners.leftUpper  = columnLeft  !== false && rowUpper !== false ? columnLeft  + rowUpper : null;\n        corners.rightUpper = columnRight !== false && rowUpper !== false ? columnRight + rowUpper : null;\n        corners.leftLower  = columnLeft  !== false && rowLower !== false ? columnLeft  + rowLower : null;\n        corners.rightLower = columnRight !== false && rowLower !== false ? columnRight + rowLower : null;\n\n        return corners;\n    }\n\n    getMoves(boardState, coordinates, isKing = false, hasJumped = false) {\n\n        if (boardState[coordinates] === null) {\n            return [];\n        }\n\n        let moves = [];\n        let jumps = [];\n\n        let killJumps = {};\n\n        const corners = this.getCorners(coordinates);\n\n        const row = utils.getRowAsInt(coordinates);\n        const player = boardState[coordinates].player;\n\n        const advanceRow = player === 'player1' ? row - 1 : row + 1;\n\n        for (let key in corners) {\n            if (!corners.hasOwnProperty(key)) {\n                continue;\n            }\n\n            let cornerCoordinates = corners[key];\n\n            if (cornerCoordinates === null) {\n                continue;\n            }\n\n            if (!isKing && cornerCoordinates.indexOf(advanceRow) < 0) {\n                continue;\n            }\n\n            if (boardState[cornerCoordinates] === null) {\n                moves.push(cornerCoordinates);\n            } else {\n                let neighborPiece = boardState[cornerCoordinates];\n\n                if (neighborPiece.player === player) {\n                    continue;\n                }\n\n                let opponentCorners = this.getCorners(cornerCoordinates);\n                let potentialJump = opponentCorners[key];\n\n                if (boardState[potentialJump] === null) {\n                    killJumps[cornerCoordinates] = potentialJump;\n                    jumps.push(potentialJump);\n                }\n            }\n        }\n\n        let movesOut;\n\n        if (hasJumped === false) {\n            movesOut = moves.concat(jumps);\n        } else {\n            // If the piece has already jumped, only additional jumps are available\n            movesOut = jumps;\n        }\n\n        let killJumpsOut = jumps.length > 0 ? killJumps : null;\n\n        if (killJumpsOut) {\n            movesOut = []\n            for (let key in killJumpsOut) {\n                movesOut.push(killJumpsOut[key]);\n            }\n        }\n\n        return [movesOut, killJumpsOut];\n\n    }\n\n    movePiece(coordinates, state) {\n        let currentState  = Object.assign({}, state.history[state.stepNumber]);\n        let boardState = Object.assign({}, currentState.boardState);\n        let movingPiece = Object.assign({}, boardState[state.activePiece]);\n\n        let jumpArray = [];\n\n        for (let key in state.jumpKills) {\n            if (!state.jumpKills.hasOwnProperty(key)) {\n                continue;\n            }\n\n            jumpArray.push(state.jumpKills[key]);\n        }\n\n        // Don't move if the coordinates don't match a moveable or jumpable square.\n        if (state.moves.indexOf(coordinates) < 0 && jumpArray.indexOf(coordinates) < 0) {\n            return null;\n        }\n\n        // King me maybe?\n        if (this.shouldKing(movingPiece, coordinates)) {\n            movingPiece.isKing = true;\n        }\n\n        // Move piece to new coordinates\n        boardState[state.activePiece] = null;\n        boardState[coordinates] = movingPiece;\n\n        // Remove opponent piece if jump is made\n        const player = movingPiece.player;\n        let hasJumped = null;\n        let newMoves = [];\n        let setCurrentPlayer = player === 'player2';\n        let setActivePiece = null;\n\n        if (jumpArray.indexOf(coordinates) > -1) {\n            let opponentPosition = utils.getKeyByValue(state.jumpKills, coordinates);\n            boardState[opponentPosition] = null;\n\n            newMoves = this.getMoves(boardState, coordinates, movingPiece.isKing, true);\n\n            if (newMoves[0].length > 0) {\n                hasJumped = true;\n                setCurrentPlayer = currentState.currentPlayer;\n                setActivePiece = coordinates;\n            } else {\n                hasJumped = null;\n            }\n        }\n\n        if (hasJumped === true) {\n            if (newMoves[0].length > 0) {\n                setCurrentPlayer = currentState.currentPlayer;\n                setActivePiece = coordinates;\n            }\n        }\n\n        let stateOut = {};\n\n        stateOut.boardState = boardState;\n        stateOut.currentPlayer = setCurrentPlayer;\n        stateOut.activePiece = setActivePiece;\n        stateOut.moves = hasJumped === true ? newMoves[0] : [];\n        stateOut.jumpKills = hasJumped === true ? newMoves[1] : null;\n        stateOut.hasJumped = hasJumped === true ? player : null;\n        stateOut.winner = this.evaluateWinner(boardState);\n\n        return stateOut;\n    }\n\n    shouldKing(movingPiece, coordinates) {\n\n        if (movingPiece.isKing === true) {\n            return false;\n        }\n\n        const row = utils.getRowAsInt(coordinates);\n        const player = movingPiece.player;\n\n        return ( (row === 1 && player === 'player1') || (row === 8 && player === 'player2') );\n    }\n\n    evaluateWinner(boardState) {\n\n        let player1Pieces = 0;\n        let player1Moves  = 0;\n\n        let player2Pieces = 0;\n        let player2Moves  = 0;\n\n        for (let coordinates in boardState) {\n            if (!boardState.hasOwnProperty(coordinates) || boardState[coordinates] === null) {\n                continue;\n            }\n\n            const movesData = this.getMoves(boardState, coordinates, boardState[coordinates].isKing, false);\n            const moveCount = movesData[0].length;\n\n            if (boardState[coordinates].player === 'player1') {\n                ++player1Pieces;\n                player1Moves += moveCount;\n\n            } else {\n                ++player2Pieces;\n                player2Moves += moveCount;\n            }\n        }\n\n        if (player1Pieces === 0 ) {\n            return 'player2pieces';\n        }\n\n        if (player2Pieces === 0 ) {\n            return 'player1pieces';\n        }\n\n        if (player1Moves === 0) {\n            return 'player2moves';\n        }\n\n        if (player2Moves === 0) {\n            return 'player1moves';\n        }\n\n        return null;\n    }\n}","import React from 'react';\nimport * as utils from '../utils.js';\n\n\nfunction Square(props) {\n\n    const squareClasses = props['squareClasses'];\n    const onClick = props['onClick'];\n\n    return (\n        <button className = { \"square \" + (squareClasses) } onClick={onClick} />\n    );\n}\n\nexport default class Board extends React.Component {\n\n    renderSquare(coordinates, squareClasses) {\n        return (\n            <Square\n                key = {coordinates}\n                squareClasses = {squareClasses}\n                onClick = {() => this.props.onClick(coordinates) }\n            />\n        );\n    }\n\n    render() {\n        let boardRender = [];\n        let columnsRender = [];\n\n        const moves = this.props.moves;\n\n        for (let coordinates in this.props.boardState) {\n\n            if (!this.props.boardState.hasOwnProperty(coordinates)) {\n                continue;\n            }\n\n            const col = utils.getColAsInt(this.props.columns, coordinates);\n            const row = utils.getRowAsInt(coordinates);\n\n            const currentPlayer = utils.returnPlayerName(this.props.currentPlayer);\n\n            const colorClass  = ( (utils.isOdd(col) && utils.isOdd(row)) || (!utils.isOdd(col) && !(utils.isOdd(row)) ) ) ? 'white' : 'black';\n\n            let squareClasses = [];\n\n            squareClasses.push(coordinates);\n            squareClasses.push(colorClass);\n\n            if (this.props.activePiece === coordinates) {\n                squareClasses.push('isActive');\n            }\n\n            if (moves.indexOf(coordinates) > -1) {\n                let moveClass = 'movable ' + currentPlayer + '-move';\n                squareClasses.push(moveClass);\n            }\n\n            if (this.props.boardState[coordinates] !== null) {\n                squareClasses.push(this.props.boardState[coordinates].player + ' piece');\n\n                if (this.props.boardState[coordinates].isKing === true ) {\n                    squareClasses.push('king');\n                }\n            }\n\n            squareClasses = squareClasses.join(' ');\n\n            columnsRender.push(this.renderSquare(coordinates, squareClasses, this.props.boardState[coordinates]));\n\n            if (columnsRender.length >= 8) {\n                columnsRender = columnsRender.reverse();\n                boardRender.push(<div key={boardRender.length} className=\"board-col\">{columnsRender}</div>);\n                columnsRender = [];\n            }\n        }\n\n        return (boardRender);\n    }\n}","import {Logic} from './Logic.js';\n\nexport class Opponent extends Logic {\n\n    getComputerMoves(boardState, player) {\n        const self = this;\n        let computerMoves = {};\n\n        for (const coordinates in boardState) {\n            if (!boardState.hasOwnProperty(coordinates)) {\n                continue;\n            }\n\n            const currentSquare = boardState[coordinates];\n\n            if (currentSquare == null) {\n                continue;\n            }\n\n            if (currentSquare.player !== player) {\n                continue;\n            }\n\n            const pieceMoves = self.getMoves(boardState, coordinates, boardState[coordinates].isKing, false);\n\n            if (pieceMoves[0].length > 0 || pieceMoves[1] !== null) {\n                computerMoves[coordinates] = pieceMoves;\n            }\n        }\n\n        return computerMoves;\n    }\n\n    getSmartMove(state, boardState, player) {\n        const computerMoves = this.getComputerMoves(boardState, player);\n\n        const moveKeys = Object.keys(computerMoves);\n\n        const superMoves = {};\n\n        // Pieces\n        for (let m = 0; m < moveKeys.length ; ++m) {\n            const piece = moveKeys[m];\n\n            const movesData = computerMoves[piece][0];\n            const jumpKills = computerMoves[piece][1];\n\n            const jumpMoves = [];\n\n            for (const jumpCoordinates in jumpKills) {\n                if (!jumpKills.hasOwnProperty(jumpCoordinates)) {\n                    continue;\n                }\n                jumpMoves.push(jumpKills[jumpCoordinates]);\n            }\n\n            let highestScore = 0;\n            let bestMove = null;\n\n            // Piece moves\n            for (let a = 0; a < movesData.length ; ++a) {\n\n                const moveTo = movesData[a];\n\n                let score = 0;\n\n                // let boardStateLeaf = Object.assign({}, boardstate);\n                let stateLeaf = Object.assign({}, state);\n\n                stateLeaf.activePiece = piece;\n                stateLeaf.moves = movesData;\n                stateLeaf.jumpKills = jumpKills;\n\n                if (jumpMoves.indexOf(moveTo) > -1) {\n                    score += 10;\n                }\n\n                while (stateLeaf.currentPlayer === false) {\n\n                    const newJumpMoves = this.getMoves(stateLeaf, stateLeaf.activePiece, stateLeaf.activePiece.isKing, true);\n\n                    stateLeaf.moves = newJumpMoves[0];\n                    stateLeaf.jumpKills = newJumpMoves[1];\n\n                    score += 10;\n                }\n\n                if (score >= highestScore) {\n                    highestScore = score;\n                    bestMove = moveTo;\n                }\n            }\n\n            superMoves[piece] = [bestMove, highestScore];\n        }\n\n        let finalMove = [];\n        let highestAllMoves = 0;\n\n        for (let pieces in superMoves) {\n            if (!superMoves.hasOwnProperty(pieces)) {\n                continue;\n            }\n\n            const pieceMove = superMoves[pieces][0];\n            const moveScore = superMoves[pieces][1];\n\n            if (moveScore >= highestAllMoves) {\n                if (moveScore === highestAllMoves) {\n                    finalMove.push([pieces, pieceMove]);\n                }\n                if (moveScore > highestAllMoves) {\n                    finalMove = [];\n                    finalMove.push([pieces, pieceMove]);\n                    highestAllMoves = moveScore;\n                }\n            }\n        }\n\n        const chooseMove = finalMove[Math.floor(Math.random()*finalMove.length)];\n\n        const out = {};\n        out.piece = chooseMove[0];\n        out.moveTo = chooseMove[1];\n\n        return out;\n    }\n\n    getRandomMove(boardState, player) {\n        const computerMoves = this.getComputerMoves(boardState, player);\n        const keys = Object.keys(computerMoves);\n        const randomPiece = keys[Math.floor(Math.random() * keys.length)];\n\n        const movesData    = computerMoves[randomPiece][0];\n        const randomMoveTo = movesData[Math.floor(Math.random()*movesData.length)];\n\n        let out = {};\n        out.piece = randomPiece;\n        out.moveTo = randomMoveTo;\n\n        return out;\n    }\n}","import React from 'react';\nimport { returnPlayerName } from './utils.js';\nimport { Logic } from './components/Logic.js';\nimport Board from './components/Board.js';\nimport { Opponent } from './components/Opponent.js';\nimport { Router } from 'react-router-dom';\nimport createBrowserHistory from 'history/createBrowserHistory';\n\n\nconst browserHistory = createBrowserHistory();\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.columns = this.setColumns();\n\n    this.Logic = new Logic(this.columns);\n    this.Opponent = new Opponent(this.columns);\n\n    this.state = {\n      history: [{\n        boardState: this.createBoard(),\n        currentPlayer: true,\n      }],\n      activePiece: null,\n      moves: [],\n      jumpKills: null,\n      hasJumped: null,\n      stepNumber: 0,\n      winner: null,\n    }\n  }\n\n  setColumns() {\n    const columns = {};\n    columns.a = 0;\n    columns.b = 1;\n    columns.c = 2;\n    columns.d = 3;\n    columns.e = 4;\n    columns.f = 5;\n    columns.g = 6;\n    columns.h = 7;\n\n    return columns;\n  }\n\n  createBoard() {\n\n    let board = {};\n\n    for (let key in this.columns) {\n\n      if (this.columns.hasOwnProperty(key)) {\n        for (let n = 1; n <= 8; ++n) {\n\n          let row = key + n;\n          board[row] = null;\n        }\n      }\n    }\n\n    board = this.initPlayers(board);\n\n    return board;\n  }\n\n  initPlayers(board) {\n    const player1 = ['a8', 'c8', 'e8', 'g8', 'b7', 'd7', 'f7', 'h7', 'a6', 'c6', 'e6', 'g6',];\n    const player2 = ['b3', 'd3', 'f3', 'h3', 'a2', 'c2', 'e2', 'g2', 'b1', 'd1', 'f1', 'h1',];\n\n    let self = this;\n\n    player1.forEach(function (i) {\n      board[i] = self.createPiece(i, 'player1');\n    });\n\n    player2.forEach(function (i) {\n      board[i] = self.createPiece(i, 'player2');\n    });\n\n    return board;\n  }\n\n  createPiece(location, player) {\n    let piece = {};\n\n    piece.player = player;\n    piece.location = location;\n    piece.isKing = false;\n\n    return piece;\n  }\n\n  getCurrentState() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    return history[history.length - 1];\n  }\n\n  handleClick(coordinates) {\n\n    if (this.state.winner !== null) {\n      return;\n    }\n\n    const currentState = this.getCurrentState();\n    const boardState = currentState.boardState;\n    const clickedSquare = boardState[coordinates];\n\n    // Clicked on a piece\n    if (clickedSquare !== null) {\n\n      // Can't select opponents pieces\n      if (clickedSquare.player !== returnPlayerName(currentState.currentPlayer)) {\n        return;\n      }\n\n      // Unset active piece if it's clicked\n      if (this.state.activePiece === coordinates && this.state.hasJumped === null) {\n        this.setState({\n          activePiece: null,\n          moves: [],\n          jumpKills: null,\n        });\n        return;\n      }\n\n      // Can't choose a new piece if player has already jumped.\n      if (this.state.hasJumped !== null && boardState[coordinates] !== null) {\n        return;\n      }\n\n      // Set active piece\n      let movesData = this.Logic.getMoves(boardState, coordinates, clickedSquare.isKing, false);\n\n      this.setState({\n        activePiece: coordinates,\n        moves: movesData[0],\n        jumpKills: movesData[1],\n      });\n\n      return;\n    }\n\n    // Clicked on an empty square\n    if (this.state.activePiece === null) {\n      return;\n    }\n\n    // Moving a piece\n    if (this.state.moves.length > 0) {\n      const postMoveState = this.Logic.movePiece(coordinates, this.state);\n\n      if (postMoveState === null) {\n        return;\n      }\n\n      this.updateStatePostMove(postMoveState);\n\n      // Start computer move is the player is finished\n      if (postMoveState.currentPlayer === false && postMoveState.winner === null) {\n        this.computerTurn();\n      }\n    }\n  }\n\n  computerTurn(piece = null) {\n\n    setTimeout(() => {\n      const currentState = this.getCurrentState();\n      const boardState = currentState.boardState;\n\n      let computerMove;\n      let coordinates;\n      let moveTo;\n\n      // If var piece != null, the piece has previously jumped.\n      if (piece === null) {\n        //computerMove = this.Opponent.getRandomMove(boardState, 'player2');\n        computerMove = this.Opponent.getSmartMove(this.state, boardState, 'player2');\n\n        coordinates = computerMove.piece;\n        moveTo = computerMove.moveTo;\n      } else {\n        // Prevent the computer player from choosing another piece to move. It must move the active piece\n        computerMove = this.Logic.getMoves(boardState, piece, boardState[piece].isKing, true);\n        coordinates = piece;\n        moveTo = computerMove[0][Math.floor(Math.random() * computerMove[0].length)];\n      }\n\n      const clickedSquare = boardState[coordinates];\n\n      let movesData = this.Logic.getMoves(boardState, coordinates, clickedSquare.isKing, false);\n\n      this.setState({\n        activePiece: coordinates,\n        moves: movesData[0],\n        jumpKills: movesData[1],\n      });\n\n      setTimeout(() => {\n        const postMoveState = this.Logic.movePiece(moveTo, this.state);\n\n        if (postMoveState === null) {\n          return;\n        }\n\n        this.updateStatePostMove(postMoveState);\n\n        // If the computer player has jumped and is still moving, continue jump with active piece\n        if (postMoveState.currentPlayer === false) {\n          this.computerTurn(postMoveState.activePiece);\n        }\n      },\n        500);\n    },\n      1000);\n  }\n\n  updateStatePostMove(postMoveState) {\n    this.setState({\n      history: this.state.history.concat([{\n        boardState: postMoveState.boardState,\n        currentPlayer: postMoveState.currentPlayer,\n      }]),\n      activePiece: postMoveState.activePiece,\n      moves: postMoveState.moves,\n      jumpKills: postMoveState.jumpKills,\n      hasJumped: postMoveState.hasJumped,\n      stepNumber: this.state.history.length,\n      winner: postMoveState.winner,\n    });\n  }\n\n  undo() {\n    const backStep = parseInt(this.state.stepNumber, 10) - 1;\n    if (backStep < 0) {\n      return;\n    }\n    const unsetHistory = this.state.history.slice(0, backStep + 1);\n    this.setState({\n      history: unsetHistory,\n      activePiece: null,\n      moves: [],\n      jumpKills: null,\n      hasJumped: null,\n      stepNumber: backStep,\n      winner: null,\n    });\n  }\n\n\n  render() {\n    const columns = this.columns;\n    const stateHistory = this.state.history;\n    const activePiece = this.state.activePiece;\n    const currentState = stateHistory[this.state.stepNumber];\n    const boardState = currentState.boardState;\n    const currentPlayer = currentState.currentPlayer;\n    const moves = this.state.moves;\n\n    //        console.log(this.state);\n\n    let gameStatus;\n\n    let undoClass = 'undo';\n\n    if (this.state.stepNumber < 1) {\n      undoClass += ' disabled';\n    }\n\n    switch (this.state.winner) {\n      case 'player1pieces':\n        gameStatus = 'You Win!';\n        break;\n      case 'player2pieces':\n        gameStatus = 'Computer Wins!';\n        break;\n      case 'player1moves':\n        gameStatus = 'No moves left - You Win!';\n        break;\n      case 'player2moves':\n        gameStatus = 'No moves left - Computer Wins!';\n        break;\n      default:\n        gameStatus = currentState.currentPlayer === true ? 'Your Turn' : 'Computer\\'s Turn';\n        break;\n    }\n\n    return (\n      <Router history={browserHistory} basename={'react-checkers'} >\n        <div className=\"reactCheckers\">\n          <div className=\"game-board\">\n            <Board\n              boardState={boardState}\n              currentPlayer={currentPlayer}\n              activePiece={activePiece}\n              moves={moves}\n              columns={columns}\n              onClick={(coordinates) => this.handleClick(coordinates)}\n            />\n          </div>\n          <div className=\"game-status\">\n            {gameStatus}\n            <div className=\"time-travel\">\n              <button className={undoClass} onClick={() => this.undo()}>Undo</button>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}